import { NextRequest, NextResponse } from "next/server";

/**
 * ADMIN DEPLOYMENT MIDDLEWARE
 * 
 * This middleware is used for the admin panel deployment.
 * It blocks access to patient-only routes and allows admin routes.
 * 
 * DO NOT EDIT THIS FILE DIRECTLY!
 * This file is copied to middleware.ts by the deployment scripts.
 */

const DEPLOYMENT_TYPE = 'ADMIN';

// Admin routes (allowed in ADMIN deployment)
const ADMIN_ROUTES = [
  '/',
  '/dashboard',
  '/appointments',
  '/patients',
  '/providers',
  '/manage-services',
  '/auth/login',
];

// Patient-only routes that should be blocked in admin deployment
const PATIENT_ONLY_ROUTES = [
  '/about',
  '/gallery',
  '/contact',
  '/services', // Patient services page (admin uses /manage-services)
];

// Check if a route is allowed in admin deployment
function isRouteAllowed(pathname: string): boolean {
  // Skip static files and Next.js internals
  if (
    pathname.startsWith('/_next') ||
    pathname.startsWith('/api') ||
    pathname.includes('.') // Static files (images, fonts, etc.)
  ) {
    return true;
  }

  // Block patient-only routes
  if (PATIENT_ONLY_ROUTES.some(route => pathname === route || pathname.startsWith(route + '/'))) {
    return false;
  }

  // Block old /admin/* routes (we use root level now)
  if (pathname.startsWith('/admin')) {
    return false;
  }

  // Allow admin routes
  return ADMIN_ROUTES.some(route => {
    if (route === pathname) return true;
    if (pathname.startsWith(route + '/')) return true;
    return false;
  });
}

export async function middleware(request: NextRequest) {
  const path = request.nextUrl.pathname;

  // Check if route is allowed in admin deployment
  if (!isRouteAllowed(path)) {
    // Return 404 for routes that don't belong to admin deployment
    return new NextResponse(null, { status: 404 });
  }

  // Admin routes authentication protection
  const adminProtectedRoutes = ['/dashboard', '/appointments', '/patients', '/providers', '/manage-services'];

  if (adminProtectedRoutes.some(route => path === route || path.startsWith(route + '/'))) {
    // Check for Firebase auth token in cookies
    const sessionCookie = request.cookies.get('__session');

    if (!sessionCookie) {
      // Redirect to login if not authenticated
      const loginUrl = new URL('/auth/login', request.url);
      loginUrl.searchParams.set('redirect', path);
      return NextResponse.redirect(loginUrl);
    }

    // Note: Role verification happens client-side in AuthContext
    // Server-side role verification would require Firebase Admin SDK
  }

  return NextResponse.next();
}

export const config = {
  matcher: [
    /*
     * Match all request paths except:
     * - _next/static (static files)
     * - _next/image (image optimization files)
     * - favicon.ico (favicon file)
     * - public files (public folder)
     */
    '/((?!_next/static|_next/image|favicon.ico|.*\\.(?:svg|png|jpg|jpeg|gif|webp)$).*)',
  ],
};

