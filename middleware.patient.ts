import { NextRequest, NextResponse } from "next/server";

/**
 * PATIENT DEPLOYMENT MIDDLEWARE
 * 
 * This middleware is used for the patient-facing deployment.
 * It blocks access to admin-only routes and allows patient routes.
 * 
 * DO NOT EDIT THIS FILE DIRECTLY!
 * This file is copied to middleware.ts by the deployment scripts.
 */

const DEPLOYMENT_TYPE = 'PATIENT';

// Patient-facing routes (allowed in PATIENT deployment)
const PATIENT_ROUTES = [
  '/',
  '/about',
  '/services',
  '/gallery',
  '/contact',
  '/booking',
  '/auth',
];

// Admin routes that should be blocked in patient deployment
const ADMIN_ONLY_ROUTES = [
  '/dashboard',
  '/appointments',
  '/patients',
  '/providers',
  '/manage-services',
];

// Check if a route is allowed in patient deployment
function isRouteAllowed(pathname: string): boolean {
  // Skip static files and Next.js internals
  if (
    pathname.startsWith('/_next') ||
    pathname.startsWith('/api') ||
    pathname.includes('.') // Static files (images, fonts, etc.)
  ) {
    return true;
  }

  // Block admin-only routes
  if (ADMIN_ONLY_ROUTES.some(route => pathname === route || pathname.startsWith(route + '/'))) {
    return false;
  }

  // Block old /admin/* routes
  if (pathname.startsWith('/admin')) {
    return false;
  }

  // Allow patient routes
  return PATIENT_ROUTES.some(route => {
    if (route === pathname) return true;
    if (pathname.startsWith(route + '/')) return true;
    return false;
  });
}

export async function middleware(request: NextRequest) {
  const path = request.nextUrl.pathname;

  console.log('[PATIENT MIDDLEWARE] Checking path:', path);

  // Check if route is allowed in patient deployment
  if (!isRouteAllowed(path)) {
    console.log('[PATIENT MIDDLEWARE] BLOCKING path:', path, '- Returning 404');
    // Return 404 for routes that don't belong to patient deployment
    return new NextResponse(null, { status: 404 });
  }

  console.log('[PATIENT MIDDLEWARE] ALLOWING path:', path);
  return NextResponse.next();
}

export const config = {
  matcher: [
    /*
     * Match all request paths except:
     * - _next/static (static files)
     * - _next/image (image optimization files)
     * - favicon.ico (favicon file)
     * - public files (public folder)
     */
    '/((?!_next/static|_next/image|favicon.ico|.*\\.(?:svg|png|jpg|jpeg|gif|webp)$).*)',
  ],
};

